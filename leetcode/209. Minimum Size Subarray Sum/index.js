/**
 * @param {number} target
 * @param {number[]} nums
 * @return {number}
 *
 *
 * inspired by:
 * https://leetcode.com/problems/minimum-size-subarray-sum/solutions/2657137/sliding-window-dynamic-approach-o-n-o-n-k-javascript/?envType=study-plan-v2&envId=top-interview-150
 *
 *
 * Принцип "гусеницы" или "червяка", который вытянувшись полностью, подтягивает
 * свой хвост к голове, изгибаясь по середине. Таким образом у нас окно меняется
 * попеременно - то с конца расширяется, то с начала сужается. Если сумма элементов
 * в окне меньше - продолжаем расширять. Если больше или равно - нет смысла расширять,
 * надо искать окно с кол-ом эл-в меньше того, что уже нашли.
 *
 */
const minSubArrayLen = (target, nums) => {
  let start = 0;
  let end = 0;
  let sum = nums[0];
  let minLength = Infinity;

  // Мы будем расширять и сужать окно, изменением начального и конечного индекса
  // Поэтому нужно следить за тем, чтобы конечный не превышал длину, а начальный
  // не был больше конечного. По итогу, мы либо дойдем до конца массива и вернем
  // наименьшую длину, либо найдем элемент больше таргета и вернемся по условию
  // когда начальный индекс будет больше конечного
  while (start <= end && end < nums.length) {
    // Если сумма эл-ов больше или равна таргету, перезаписываем переменную,
    // если текущая длина меньше хранимой. Сужаем окно, чтобы найти
    // наименьшую длину подмассива (передвигаем начальный указатель вперед и вычитаем
    // сам элемент).
    if (sum >= target) {
      minLength = Math.min(minLength, end - start + 1);
      // Вычитаем имеющийся эл-т, поэтому передвигаем указатель позже
      sum -= nums[start++];
      // Если сумма недостаточна, продолжаем расширять окно - передвигаем конечный
      // указатель правее и прибавляем сам элемент
    } else {
      // Прибавляем новый эл-т, поэтому передвигаем указатель раньше,
      // чтобы сначала на него сослаться
      sum += nums[++end];
    }
  }

  return minLength === Infinity ? 0 : minLength;
};

console.log(minSubArrayLen(8, [4, 11, 1, 0, 2, 6, 9]));
